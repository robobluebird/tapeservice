<h1>Send a sound to the tape named <%= @tape['name'] %></h1>
<div class="centered bumped">
  upload a track
</div>
<% if @error %>
  <div class="error">
    <%= @error %>
  </div>
<% end %>
<div class="centered bumped">
  <form action="/tapes/<%= @tape['name'] %>/uploads" method="POST" enctype="multipart/form-data">
    <input type="file" name="file">
    <br />
    <input type="text" name="person" placeholder="who are you?" />
    <br />
    <input type="submit">
  </form>
</div>
<div style="display: none;" class="centered bumped">
  or record a message
</div>
<div style="display: none;" class="centered bumped">
  <section class="main-controls">
    <div id="buttons">
      <button class="record">Record</button>
      <button class="stop">Stop</button>
      <button class="submit">Submit</button>
    </div>
  </section>

  <section class="sound-clips">
  </section>
</div>
<div style="margin-top: 50px;" class="centered">
  or go
  <a href="/tapes/<%= @tape["name"] %>">back</a>
</div>
<!--
<script>
  let record = document.querySelector('.record');
  let stop = document.querySelector('.stop');
  let submit = document.querySelector('.submit');
  let soundClips = document.querySelector('.sound-clips');
  let canvas = document.querySelector('.visualizer');
  let mainSection = document.querySelector('.main-controls');

  // disable stop button while not recording

  stop.disabled = true;
  submit.disabled = true;

  //main block for doing the audio recording

  if (navigator.mediaDevices.getUserMedia) {
    console.log('getUserMedia supported.');

    let constraints = { audio: true };
    let chunks = [];
    let blob = null;

    let onSuccess = (stream) => {
      var mediaRecorder = new MediaRecorder(stream);

      record.onclick = () => {
        mediaRecorder.start();
        console.log(mediaRecorder.state);
        console.log("recorder started");
        record.style.background = "red";

        stop.disabled = false;
        record.disabled = true;
        blob = null;
      }

      stop.onclick = () => {
        mediaRecorder.stop();
        console.log(mediaRecorder.state);
        console.log("recorder stopped");
        record.style.background = "";
        record.style.color = "";
        submit.style.background = "green";
        submit.disabled = false;

        stop.disabled = true;
        record.disabled = false;
      }

      submit.onclick = () => {
        if (blob) {
          var formData = new FormData();

          formData.append("file", blob);
          formData.append("blob_filename", `recording_${Date.now()}.ogg`);

          var xhr = new XMLHttpRequest();
          xhr.open("POST", "/tapes/<%= @tape['name'] %>/uploads", true);
          xhr.onreadystatechange = (response) => {
            if (this.readyState === XMLHttpRequest.DONE) {
              if (this.status === 200) {
                blob = null;
              }

              submit.style.background = "";
              submit.disabled = true;
            }
          }
          xhr.send(formData);
        }
      }

      mediaRecorder.onstop = (e) => {
        console.log("data available after MediaRecorder.stop() called.");
        blob = new Blob(chunks, { 'type' : 'audio/ogg; codecs=opus' });
        chunks = [];
      }

      mediaRecorder.ondataavailable = (e) => {
        chunks.push(e.data);
      }
    }

    let onError = (err) => {
      console.log('The following error occured: ' + err);
    }

    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);
  } else {
    console.log('getUserMedia not supported on your browser!');
  }
</script> -->

